package com.example.multithreading;

import java.util.List;
import java.util.ArrayList;

public class MultiDaySimulator {
    private String filename;
    private List<Employee> employees;
    private int currentDay = 1;
    
    public MultiDaySimulator(String filename, List<Employee> employees) {
        this.filename = filename;
        this.employees = employees;
    }
    
    public void simulateUntilCompletion() {
        System.out.println("=== –ú–ù–û–ì–û–î–ù–ï–í–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø ===");
        System.out.println("–¶–µ–ª—å: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏");
        
        while (!allTasksCompleted()) {
            System.out.println("\n--- –î–ï–ù–¨ " + currentDay + " ---");
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á)
            for (Employee emp : employees) {
                emp.resetDailyStats();
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            WorkDay workDay = new WorkDay();
            for (Employee emp : employees) {
                workDay.addEmployee(emp);
            }
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å
            simulateWorkDay(workDay);
            
            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è
            printDayResults(workDay);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
            saveDayStatistics();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            printProgress();
            
            currentDay++;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
        
        System.out.println("\n=== –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´! ===");
        System.out.println("–ü–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –¥–Ω–µ–π: " + (currentDay - 1));
    }
    
    private boolean allTasksCompleted() {
        return employees.stream()
                .allMatch(emp -> emp.getTasks().stream()
                        .allMatch(Task::isCompleted));
    }
    
    private void simulateWorkDay(WorkDay workDay) {
        workDay.start();
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        List<Thread> workerThreads = new ArrayList<>();
        List<EmployeeWorker> workers = new ArrayList<>();
        
        for (Employee emp : workDay.getEmployees()) {
            EmployeeWorker worker = new EmployeeWorker(emp, workDay);
            Thread thread = new Thread(worker);
            workers.add(worker);
            workerThreads.add(thread);
            thread.start();
        }
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤
        while (!workDay.isDayComplete()) {
            workDay.advanceHour();
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for (EmployeeWorker worker : workers) {
            worker.stop();
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for (Thread thread : workerThreads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        for (Employee emp : workDay.getEmployees()) {
            emp.finalizeWorkDay();
        }
    }
    
    private void printDayResults(WorkDay workDay) {
        System.out.println("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ù–Ø " + currentDay + " ---");
        
        for (Employee emp : workDay.getEmployees()) {
            System.out.println(emp.getName() + ":");
            System.out.println("  –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: " + emp.getCompletedTasksCount() + "/" + emp.getTotalTasksCount());
            System.out.println("  –í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á–∏: " + emp.getTimeString(emp.getTotalTaskTimeMinutes()));
            System.out.println("  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + String.format("%.1f", emp.getEfficiency()) + "%");
        }
    }
    
    private void saveDayStatistics() {
        try {
            // –°–æ–∑–¥–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è
            String sheetName = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–î–µ–Ω—å_" + currentDay;
            ExcelManager.saveStatisticsToSheet(filename, employees, sheetName);
            System.out.println("‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è " + currentDay + " —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
        } catch (Exception e) {
            System.err.println("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è " + currentDay + ": " + e.getMessage());
        }
    }
    
    private void printProgress() {
        int totalTasks = employees.stream().mapToInt(Employee::getTotalTasksCount).sum();
        int completedTasks = employees.stream().mapToInt(Employee::getCompletedTasksCount).sum();
        double progress = (double) completedTasks / totalTasks * 100.0;
        
        System.out.println("\nüìä –ü–†–û–ì–†–ï–°–°: " + completedTasks + "/" + totalTasks + " –∑–∞–¥–∞—á (" + 
                          String.format("%.1f", progress) + "%)");
    }
} 